pipeline {
    agent any

    tools {
        // Install the Maven version configured as "maven-local-3.6.3" and add it to the path.
        maven "maven-local-3.6.3"
    }

    environment {
        // Set up DockerHub credentials
        DOCKERHUB_CREDENTIALS = credentials('dockerhub_token')
    }

    stages {
        stage('Prepare') {
            steps {
                // Clean workspace prior to installation
                cleanWs()
            }
        }
        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git url: 'https://github.com/ProtossGP32/libraryH2command.git'

                // Run Maven on a Unix agent.
                // The output image is named myfirstprojectspring:0.0.1-SNAPSHOT
                sh "mvn -Dmaven.test.failure.ignore=true clean spring-boot:build-image"

                // To run Maven on a Windows agent, use
                // bat "mvn -Dmaven.test.failure.ignore=true clean spring-boot:build-image"
            }

            post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                    // Comment until test dependencies are resolved
                    //junit '**/target/surefire-reports/TEST-*.xml'
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                    // Docker-hub credentials
                    withDockerRegistry([credentialsId: 'dockerhub_token', url: '']) {
                        sh '''
                        echo "Dockerhub credentials from environment: %DOCKERHUB_CREDENTIALS%"
                        echo %DOCKERHUB_CREDENTIALS_PSW% | docker login -u %DOCKERHUB_CREDENTIALS_USR% --password-stdin
                        # Retag image prior to push
                        docker tag myfirstprojectspring:0.0.1-SNAPSHOT project/myfirstprojectspring:0.0.1-SNAPSHOT
                        docker push project/myfirstprojectspring:0.0.1-SNAPSHOT
                        docker tag project/myfirstprojectspring:0.0.1-SNAPSHOT project/myfirstprojectspring:latest
                        docker push project/myfirstprojectspring:latest
                        '''
                    }
                }
                // Clean after every build
                always {
                    cleanWs(cleanWhenNotBuilt: false,
                            deleteDirs: true,
                            disableDeferredWipeout: true,
                            notFailBuild: true,
                            patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                                       [pattern: '.propsfile', type: 'EXCLUDE']])
                }
            }
        }
    }
}